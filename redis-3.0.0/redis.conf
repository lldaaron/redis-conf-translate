# Redis configuration file example
# redis 配置文件示例

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
# 当你需要为某个配置项指定内存大小的时候，必须要带上单位，
# 通常的格式就是 1k 5GB 4M 等酱紫：
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.
# 单位是不区分大小写的，你写 1GB 1Gb 1gB 也行

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
# 假如说你有一个可用于所有的 redis server 的标准配置模板，
# 但针对某些 server 又需要一些个性化的设置，
# 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
# 但是要注意哦，include 是不能被 config rewrite 命令改写的(admin或者redis哨兵)
# 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，
# 以避免在运行时覆盖配置的改变。
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
# 相反，你就把它放在后面（外国人真啰嗦）。
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。
# 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。
daemonize yes

# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.
# 当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/run/redis.pid 文件里面，
# 但是你可以在这里自己制定它的文件位置。
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379.
# If port 0 is specified Redis will not listen on a TCP socket.
# 监听端口号，默认为 6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。
port 6379

# TCP listen() backlog.
# TCP 监听的最大容纳数量
#
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
# 在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题。
# Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，
# 所以你要修改这两个值才能达到你的预期。
tcp-backlog 511

# By default Redis listens for connections from all the network interfaces
# available on the server. It is possible to listen to just one or multiple
# interfaces using the "bind" configuration directive, followed by one or
# more IP addresses.
# 默认情况下，redis 在 server 上所有有效的网络接口上监听客户端连接。
# 你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP。
#
# Examples:
# 示例，多个IP用空格隔开:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

bind 127.0.0.1 172.21.32.69

# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
# 指定监听连接的Unix socket的路径。这个路径没有默认值，所以如果没有指定，redis是不会监听unix socket的。
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0
# 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）

# TCP keepalive.
# tcp 心跳包。
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
# 如果设置为非零，则在与客户端失去连接的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。
# 这个之所有有用，主要由两个原因：
#
# 1) Detect dead peers.
# 1) 探测到死的 peers
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
# 2) ??
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
# 在linux下，这个指定的值（秒为单位）是发送ACK的周期值。注意：关闭连接需要两倍指定的值。在其他内核，这个周期依赖与内核的配置。
#
# A reasonable value for this option is 60 seconds.
# 60秒是一个合理的值。
tcp-keepalive 0

# Specify the server verbosity level.
# 定义日志级别。
# This can be one of:
# 可以是下面的这些值：
# debug (a lot of information, useful for development/testing)
# debug (适用于开发或测试阶段)
# verbose (many rarely useful info, but not a mess like the debug level)
# verbose (很多特殊的日志, 但是不会向debug级别的那么乱)
# notice (moderately verbose, what you want in production probably)
# notice (适用于生产环境)
# warning (only very important / critical messages are logged)
# warning (仅仅一些重要的消息被记录)
loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 指定日志文件的位置。如果设置为空字符串，redis将会把日志输出到标准输出。注意：如果如果使用标准输出但是是以守护模式运行redis，日志将会被输出到/dev/null
logfile ""

# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# 要想把日志记录到系统日志，就把它改成 yes，
# 也可以可选择性的更新其他的syslog 参数以达到你的要求
# syslog-enabled no

# Specify the syslog identity.
# 设置 syslog 的 identity。
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
# 设置数据库的数目。
# 默认数据库是 DB 0，你可以在每个连接上使用 select <dbid> 命令选择一个不同的数据库，
# 但是 dbid 必须是一个介于 0 到 (databasees - 1) 之间的值
databases 16

################################ SNAPSHOTTING  ################################
################################ 快照 ################################
#
# Save the DB on disk:
# 存 DB 到磁盘：
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   根据给定的时间间隔和写入次数将数据保存到磁盘。
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#   下面的例子的意思是：
#   900 秒后如果至少有 1 个 key 的值变化，则保存
#   300 秒后如果至少有 10 个 key 的值变化，则保存
#   60 秒后如果至少有 10000 个 key 的值变化，则保存
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#   注意：你可以注释掉所有的 save 行来停用保存功能。
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#   也可以直接一个空字符串来实现停用：
#
#   save ""

save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
# 默认情况下，如果redis开启rdb快照（至少是一次保存点）并且最后一次的后台保存失败，redis 将停止接受写操作。
# 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，
# 否则就会没人注意到灾难的发生。
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
# 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
# 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# 默认都设为 yes
# 如果你希望保存子进程节省点cpu，你就设置它为 no ，
# 不过这个数据集可能就会比较大
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
# 从RDB的V5版本开始，CRC64 checksum会在RDB文件的末尾。这能防止格式化错误但是同时在加载RDB文件时也带了了10%左右的性能损耗，所以可以禁用这个选项达到最大性能。
# 
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
# 如果禁用rdbchecksum，RDB文件的checksum为0，这告诉加载文件的代码跳过检查。
rdbchecksum yes

# The filename where to dump the DB
# 设置 dump 的文件位置
dbfilename dump.rdb

# The working directory.
# 工作目录。
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# 例如上面的 dbfilename 只指定了文件名，但是它会写入到这个目录下。
#
# The Append Only File will also be created inside this directory.
# AOF模式的文件也会在此目录下生成。
#
# Note that you must specify a directory here, not a file name.
# 这个配置项一定是个目录，而不能是文件名。
dir ./

################################# REPLICATION #################################
################################# 主从复制 #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
# 主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。
# (注意这个只需要在 slave 上配置。) 下面几点能快速了解redis的主从复制。
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of slaves.
# 1) redis的主从复制是异步的，但是如果主机没有达到最少的连接从机数时，可以使主机停止接收写操作。
# 2) Redis slaves are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 2) 如果主从复制连接只断开了相对较短的时间，redis从机可以和主机部分重新同步。你可能会有需求设置一个合理的主从复制备份大小（在这个文件的下一节设置）。
# 3) Replication is automatic and does not need user intervention. After a
#    network partition slaves automatically try to reconnect to masters
#    and resynchronize with them.
# 3) 主从复制是全自动的，并且不需要使用者的介入。当网络堵塞时，从机会自动的尝试重连主机并且与其重新同步。
#
# slaveof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
# 如果 master 需要密码认证（使用下面的requirepass设置密码），这个配置可以告诉从机在开始主从复制同步之前进行验证，否则主机将会拒绝从机的请求。
#
# masterauth <master-password>

# When a slave loses its connection with the master, or when the replication
# is still in progress, the slave can act in two different ways:
# 当主机失去与从机的连接时，或者当主从复制还在进行中，从机可以进行以下两种操作：
#
# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
# 1) 如果slave-serve-stale-data被设置为yes（默认值），从机将仍旧返回客户端的请求，但是数据可能是过期的数据或者为空如果这是第一次同步。
#
# 2) if slave-serve-stale-data is set to 'no' the slave will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO and SLAVEOF.
# 2) 如果slave-serve-stale-data被设置为no，除了INFO和SLAVEOF命令，从机对于所有其他命令都会返回"SYNC with master in progress"的错误消息。
#
slave-serve-stale-data yes

# You can configure a slave instance to accept writes or not. Writing against
# a slave instance may be useful to store some ephemeral data (because data
# written on a slave will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
# 你可以配置从机是否接收写请求。写入slave来存储一些短暂的数据可能是有用的（因为在master重新同步后，写入到slave的数据会更容易被删除），但是这也会造成很多坑。
#
# Since Redis 2.6 by default slaves are read-only.
# redis2.6版本后从机默认是只读的。
#
# Note: read only slaves are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only slave exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only slaves using 'rename-command' to shadow all the
# administrative / dangerous commands.
# 注意：只读的从机不是设计为暴露给不可信的客户端。它仅仅是防止误操作的一个保护层。
# 同时，默认情况下，只读的从机可以相应所有的管理操作命令，不如说“CONFIG, DEBUG”。你可以使用rename-command命令来隐藏这些操作命令达到安全性的目的。
slave-read-only yes

# Replication SYNC strategy: disk or socket.
# 主从复制同步策略：磁盘或者网络。
# 
#
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
# 警告：非磁盘的主从复制目前还是实验阶段（生产环境不可靠！）
#
# New slaves and reconnecting slaves that are not able to continue the replication
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the slaves.
# The transmission can happen in two different ways:
# 那些不能继续主从复制的，比如新的从机和重连的从机需要进行全同步。RDB文件会从主机传输到从机。传输行为可以通过一下两种方式：
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the slaves incrementally.
# 1) 磁盘备份方式：主机创建一个新的进程用来写rdb文件至磁盘。然后父进程渐进地传输这个文件至从机上。
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to slave sockets, without touching the disk at all.
# 2) 非磁盘方式：主机创建一个新的进程直接将rdb文件写入从机的套接字，而完全不通过磁盘操作。
#
# With disk-backed replication, while the RDB file is generated, more slaves
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new slaves arriving will be queued and a new transfer
# will start when the current one terminates.
# 使用磁盘备份复制，在rdb文件正在生成时，多个从机可以排队并且当生成rdb文件的子进程完成后，从机可以立即被提供rdb文件。
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple slaves
# will arrive and the transfer can be parallelized.
# 使用非磁盘方式时，主机等待一个可配置的时间后再开始传输，这样是为了使多个从机能够并行的传输。
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
# 在慢速的磁盘和快速的网络（大带宽）情况下，非磁盘复制好。
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the slaves.
# 当使用非磁盘复制时，可以配置延迟时间，使server延迟生成子进程去通过socket传输rdb文件至从机。
#
# This is important since once the transfer starts, it is not possible to serve
# new slaves arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more slaves arrive.
# 这点很重要，是因为一旦传输开始，就不能接受新的从机，新的从机将会排队至下一次的rdb传输，所以主机延迟开始以达到让更多从机加入传输的目的。
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
# 这个延迟时间的单位是秒，默认是5s。关闭这个延迟传输的功能只需要将值设置为0，这样传输就会马上开始。
repl-diskless-sync-delay 5

# Slaves send PINGs to server in a predefined interval. It's possible to change
# this interval with the repl_ping_slave_period option. The default value is 10
# seconds.
# 从机可以以一个预先定义间隔发送PINGs至server。使用repl-ping-slave-period这个参数，可以更改这个间隔时间。默认的值是10s。
#
# repl-ping-slave-period 10

# The following option sets the replication timeout for:
# 下面的选项为一下几点设置了主从复制超时：
#
# 1) Bulk transfer I/O during SYNC, from the point of view of slave.
# 2) Master timeout from the point of view of slaves (data, pings).
# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-slave-period otherwise a timeout will be detected
# every time there is low traffic between the master and the slave.
# repl-timeout的值一定要比repl-ping-slave-period的大
#
# repl-timeout 60

# Disable TCP_NODELAY on the slave socket after SYNC?
# 在同步后关闭TCP_NODELAY？
#
# If you select "yes" Redis will use a smaller number of TCP packets and
# less bandwidth to send data to slaves. But this can add a delay for
# the data to appear on the slave side, up to 40 milliseconds with
# Linux kernels using a default configuration.
# 如果你选择yes，redis将会使用更少的tcp包和带宽来发送数据至从机。但是在linux内核环境并且使用默认配置，会增加从机数据的延时至40毫秒(译者注：查阅Nagling算法)
#
# If you select "no" the delay for data to appear on the slave side will
# be reduced but more bandwidth will be used for replication.
# 如果选择no，从机的数据延时会减少，但是这样会占用更多的带宽。
#
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and slaves are many hops away, turning this to "yes" may
# be a good idea.
# 默认的情况是为了低延时的优化，但是在非常拥堵的网络环境下或是主从。。。，设置为yes会是个好的选择。
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# slave data when slaves are disconnected for some time, so that when a slave
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the slave missed while
# disconnected.
# 设置主从复制backlog的大小。当某些时候从机断开连接时，backlog用来聚集从机的数据，所以当从机重连后，full同步是没有必要的，部分同步就够了，只需要传递当从机断开连接时丢失的那部分数据。
#
# The bigger the replication backlog, the longer the time the slave can be
# disconnected and later be able to perform a partial resynchronization.
# backlog设置的越大，从机断连的时间可以越久。
#
# The backlog is only allocated once there is at least a slave connected.
# 当有从机连接时，backlog只会分配一次
#
# repl-backlog-size 1mb

# After a master has no longer connected slaves for some time, the backlog
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last slave disconnected, for
# the backlog buffer to be freed.
# 当主机和从机断开指定时间后，backlog将被清空。从最后一个从机断开开始，经过下面配置的时间后，将清空backlog。
#
# A value of 0 means to never release the backlog.
# 如果设置为0，意味着绝不释放 backlog。
#
# repl-backlog-ttl 3600

# The slave priority is an integer number published by Redis in the INFO output.
# It is used by Redis Sentinel in order to select a slave to promote into a
# master if the master is no longer working correctly.
# slave priority是 当主机不再正确工作时，Redis Sentinel推举从机为主机的权重。
#
# A slave with a low priority number is considered better for promotion, so
# for instance if there are three slaves with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
# priority number低的更容易被推举，所以当有三个从机权重分别是10, 100, 25，Sentinel将会推举最小的，即10为主机。
#
# However a special priority of 0 marks the slave as not able to perform the
# role of master, so a slave with priority of 0 will never be selected by
# Redis Sentinel for promotion.
# 然而，特殊的配置0表示从机不能被推举成master。
#
# By default the priority is 100.
# 默认的值是100。
slave-priority 100

# It is possible for a master to stop accepting writes if there are less than
# N slaves connected, having a lag less or equal than M seconds.
# 如果至少有 min-slaves-to-write 个从服务器， 并且这些服务器的延迟值都少于 min-slaves-max-lag 秒， 那么主服务器就会执行客户端请求的写操作。
#
# The N slaves need to be in "online" state.
# 需要有N个从机是在线状态。
#
# The lag in seconds, that must be <= the specified value, is calculated from
# the last ping received from the slave, that is usually sent every second.
# 延迟（秒）必须小于等于指定的值，延迟是根据最后一次从从机收到ping命令的时间计算的，通常每一秒都会发送一次ping命令。
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough slaves
# are available, to the specified number of seconds.
# 这个选项不能保证N个从机接受写操作，但是可以限制在指定的时间外针对从机不足的造成的写操作丢失。
#
# For example to require at least 3 slaves with a lag <= 10 seconds use:
# 至少需要3个从机并且延时都在10秒之内可以采用下面的配置：
#
# min-slaves-to-write 3
# min-slaves-max-lag 10
#
# Setting one or the other to 0 disables the feature.
# 把其中一个设置为0可以禁用这个特性。
#
# By default min-slaves-to-write is set to 0 (feature disabled) and
# min-slaves-max-lag is set to 10.
# 默认情况下min-slaves-to-write是0（表示禁用这个特性），min-slaves-max-lag设置为10。

################################## SECURITY ###################################
################################## 安全 ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 要求客户端在进行其他操作之前发送AUTH <PASSWORD>进行验证。这在不授信的网络中很有用。
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
#
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
# 警告：因为redis非常快，外部用户可在1秒内尝试15w次密码。这意味着你应该使用一个非常复杂的密码，否则很容易被破解。
#
# requirepass foobared

# Command renaming.
# 命令重命名。
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
# 在共享的环境中，可以改变一些危险命令的名称。比如说CONFIG命令可以改名成某个很难猜到的名称，这样这条命令仅仅能在内部的工具中使用，而不能在通用的客户端使用。
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
rename-command shutdown "dangerous_shutdown_b840fc02d524045429941"
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
# 也可以设成空字符串，从而使这条命令完全不可用。
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to slaves may cause problems.
# 注意：改变命令的名字在记日志至AOF文件或者传输给从机时可能会造成问题。

################################### LIMITS ####################################
################################### 限制 ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
# 设置最大同时连接的客户端的数量。默认情况下最大为10000个客户端，然而??(大概是说比这个值要小32)
#
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 一旦达到最大限制，redis 将关闭所有的新连接
# 并发送一个‘max number of clients reached’的错误。
#
# maxclients 10000

# Don't use more memory than the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
# 设置最大使用内存限制。当达到内存限制时，redis将会根据移除策略移除key。
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
# 如果redis不能根据移除策略移除或者移除策略设置为noeviction，redis针对SET, LPUSH等需要更多内存的指令将返回错误消息，而对于GET等只读的指令还能正确响应。
#
# This option is usually useful when using Redis as an LRU cache, or to set
# a hard memory limit for an instance (using the 'noeviction' policy).
# redis用作LRU（近期最少使用算法）缓存或者固定内存（使用noeviction策略），那么这个配置项就很有用。
#
# WARNING: If you have slaves attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the slaves are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of slaves is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
# 警告：如果从机设置了最大内存，主机对从机的输出缓冲大小是不计算在已使用的内存中的，所以网络问题、重新同步不会触发这样一个循环--key失效了，从而至从机的输出缓冲因为del指令而增大，又触发了更多的key失效，最后整个redis被清空。
#
# In short... if you have slaves attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for slave
# output buffers (but this is not needed if the policy is 'noeviction').
# 如果你配置了从机复制，那么最好把最大内存调小，这样才能有空闲的空间来存放输出缓冲（过期策略是noeviction，则不需要这么做）。
#
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
# 最大内存策略：当达到最大内存时，redis该怎么选择被移除的key。
#
# volatile-lru -> remove the key with an expire set using an LRU algorithm
# volatile-lru -> 使用 LRU 算法移除包含过期设置的 key 。
# allkeys-lru -> remove any key according to the LRU algorithm
# allkeys-lru -> 根据 LRU 算法移除所有的 key 。
# volatile-random -> remove a random key with an expire set
# volatile-random -> 移除任意一个设置了过期时间的key
# allkeys-random -> remove a random key, any key
# allkeys-random -> 移除任意一个key
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)
# volatile-ttl -> 移除一个离设置过期时间最近的key
# noeviction -> don't expire at all, just return an error on write operations
# noeviction -> 不让任何 key 过期，只是给写入操作返回一个错误
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
# 注意：当没有合适的可被移除的key时，以上所有的策略都会针对写操作返回错误。
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy noeviction
maxmemory-policy volatile-lru

# LRU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
# LRU和TTL算法不是一个精确的算法(为了节省内存)，因此能使用参数调整准确性。默认情况下，redis会检查5个key，从中挑出一个最近最少使用的key。
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.
# 默认值5是经过考证的结果。10会更加准确但是消耗更多的性能。3足够快但是不够准确。
#
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################
############################## AOF模式 ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
# 默认的，redis异步地存储数据集合至磁盘。这种模式在绝大多数的应用都是很好的，但是Redis进程异常或者停电可能会造成几分钟内的写数据丢失(save rdb模式)。
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
# AOF是提供更好持久化的一种模式。比如说，使用默认的数据fsync策略（在下面可以配置），在发生断电时，redis仅仅只会丢失一秒以内的写数据，或者发生redis进程异常时（操作系统依然能正确运行），仅仅丢失一条写数据。
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
# AOF 或者 RDB 持久化可以同时启用。如果AOF 启用了，在redis启动时会加载AOF文件，因为AOF比RDB具备更高的数据完整性。
#
# Please check http://redis.io/topics/persistence for more information.

appendonly yes

# The name of the append only file (default: "appendonly.aof")
# AOF文件名称

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
# fsync()调用告诉操作系统将数据缓冲区的数据实际的写入到磁盘。有些操作系统会实际写至磁盘，而有些只是会尽快写。
#
# Redis supports three different modes:
# redis支持3种不同的模式：
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
# no：不执行fsync，让操作系统自行决定刷缓冲区至磁盘。最快。
# always：每条写指令都执行一次fsync。慢但是安全。
# everysec：每秒执行一次fsync。综合的考虑，最坏可能丢失一秒之内的写数据。
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
# 默认值是everysec，这是速度和安全的一个折中的方案。后面一些废话。。。
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".
# 如果不确定，使用"everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
# 当AOF同步策略设置为always或者everysec，并且后台保存进程（save RDB 或者是 AOD重写）占用大量磁盘IO，在一些Linux配置下，redis可能会在fsync的调用上堵塞很长时间。
# 注意：目前来看还没有解决方案，就算在不同的线程调用fsync也会堵塞同步的write调用。
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
# 为了缓解这个问题，当bgsave或aof重写时，可以使用下面的配置禁止fsync在主进程的调用。
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
# 这意味着，当有其他子进程正在保存时，等效于设置appendfsync为no。实际上，这意味着在最坏的情况下（默认的Linux设置），可能会丢失至少30s的写日志。
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.
# 有延迟问题可设置为yes。否则保持no，能最大保证数据完整性。

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
# 自动重写AOF。
# 当AOF日志达到指定百分比时，redis可以通过隐式地调用BGREWRITEAOF命令，自动地重写AOF。
# 
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
# 它是这么工作的：Redis在每一次重写后，记住AOF文件的大小（如果从来没有重写过，则记录启动时使用的AOF文件大小）。
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
# 比较记录的那个大小和当前文件的大小。如果当前文件的大小和记录大小的比例大于指定百分比，重写就会触发。
# 同样的，可以指定最小AOF文件大小，在文件非常小但是已经超过设置的百分比时想要避免重写这么设置非常有用。
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.
# 百分比设置为0可以禁用自动AOF重写的功能。

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
# 当redis启动加载AOF数据至内存结束时，可能会发现AOF文件有损坏。这可能是运行redis的系统崩溃导致的，尤其是使用ext4文件系统并且没有设置data=ordered（在当操作系统运行正常时，redis崩溃不会造成这个问题）。
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
# 如果AOF在加载完时发现是不完整的，Redis可以退出，或者加载尽可能多的数据（默认配置）并且启动。下面的选项可以控制。
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
# 如果aof-load-truncated是yes，不完整的AOF文件能被加载并且redis服务能启动，但是会发一条日志告诉用户这个事件。
# 反而言之，如果设置成no，redis服务中断并且拒绝启动。这时，在下次重启之前，用户需要通过redis-check-aof工具修复AOF文件。
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
# 注意：当AOF文件中损坏（和不完整是两码事）时，服务会拒绝启动并退出。这个选项仅在redis尝试从AOF文件读取更多的数据但是不完整时有效。
# 
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
################################ REDIS 集群  ###############################

#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
# in order to mark it as "mature" we need to wait for a non trivial percentage
# of users to deploy it in production.
# 警告：redis集群是稳定的，但是不能称为成熟，这需要大量用户用作生产环境中才能称为成熟的。
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
# 正常的redis实例是不能称为redis集群一部分的；只有启动redis为集群模式的节点才是。只需要放开下面的注释启动才能使redis称为集群节点。
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
# 每一个集群节点都有一个集群配置文件。这个配置文件不需要手动编辑。它是被redis节点创建和更新的。每个redis集群节点需要不同的配置文件。确保运行在相同系统中的实例不要用相同名称的配置文件。
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Cluster node timeout是判断一个节点失效需要不可到达的毫秒数。
# Most other internal time limits are multiple of the node timeout.
# ??
# cluster-node-timeout 15000

# A slave of a failing master will avoid to start a failover if its data
# looks too old.
# 一个失效的主机的从机的数据太旧，会避免开始失效转移。
#
# There is no simple way for a slave to actually have a exact measure of
# its "data age", so the following two checks are performed:
# 没有一个简单的方法测量从机数据的新旧程度，所以使用以下两点来判定：
#
# 1) If there are multiple slaves able to failover, they exchange messages
#    in order to try to give an advantage to the slave with the best
#    replication offset (more data from the master processed).
#    Slaves will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
# 1) 如果有多个从机可以故障转移，它们会交换信息选出最佳复制偏移量的从机（从主机处理了最多数据的从机）。根据偏移量来获得评分，然后开始故障转移。
#
# 2) Every single slave computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the slave will not try to failover
#    at all.
# 2) 每个从机计算与主机交互的最后时间。可以根据最后ping或者接受到的命令（如果主机仍然是“连接”的状态）的时间，或者是与主机断线的时间（如果主从复制已经断开）。如果最后交互时间太久，从机不会开始故障转移。
#
# The point "2" can be tuned by user. Specifically a slave will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
# 第二点可以人为改变。特别地，如果最后与主机交互的时间大于下面的公式，从机不会故障转移。
#
#   (node-timeout * slave-validity-factor) + repl-ping-slave-period
#
# So for example if node-timeout is 30 seconds, and the slave-validity-factor
# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the
# slave will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
# 所以，假如node-timeout是30s，slave-validity-factor是10，repl-ping-slave-period默认也是10，如果从机与主机失去交互时间大于310秒，从机不会故障转移。
#
# A large slave-validity-factor may allow slaves with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a slave at all.
# 越大的slave-validity-factor容忍从机使用更老的数据来故障转移，然而这个数太小可能会导致集群推举不出从机来故障转移。
#
# For maximum availability, it is possible to set the slave-validity-factor
# to a value of 0, which means, that slaves will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
# 为了最大的可用性，可以设置slave-validity-factor为0（特殊值），这意味着从机总是会故障转移，而不管它们与主机的最后交互时间。（然而仍然会根据偏移量来选出从机）
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
# 0是唯一一个能使集群继续运转的数字。
#
# cluster-slave-validity-factor 10

# Cluster slaves are able to migrate to orphaned masters, that are masters
# that are left without working slaves. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working slaves.
# 集群的从机可以转移成孤儿主机，也就是没有没有可用从机的主机。这可以提升集群的可用性，但是如果没有从机，孤儿主机不能被故障转移。
#
# Slaves migrate to orphaned masters only if there are still at least a
# given number of other working slaves for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a slave
# will migrate only if there is at least 1 other working slave for its master
# and so forth. It usually reflects the number of slaves you want for every
# master in your cluster.
# 只有仍然有至少指定数量的从机（for their old master）,从机才能迁移成孤儿主机。通过“migration barrier”设置。设置为1意味着至少要有一个可用的从机，从机才能迁移。通常这反应了你设想主机的从机的数量。
#
# Default is 1 (slaves migrate only if their masters remain with at least
# one slave). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
# 默认为1。防止迁移只需设置这个参数为一个很大的数字。也可以设置为0，但仅用于调试，在生产中非常危险。
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
# 默认的，如果发现有hash slot没有被覆盖（没有可用节点服务某个hash slot），集群节点不会接收查询。
# 如果集群部分不可用（比如说一部分hash slot没有被覆盖），全部的集群也会最终不可用。
# 只要所有的slot被重新覆盖，会自动可用。
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
# 然而，有时候你希望集群的子集继续工作，继续接收仍然被覆盖的hash slot部分的查询请求。为了达到这个目的，设置cluster-require-full-coverage为no。
#
cluster-require-full-coverage no

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

################################## SLOW LOG ###################################
################################## 慢日志 ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
# redis的慢日志是记录执行超过一定时间的查询命令的日志。执行时间不包括IO操作，比如说与客户端交互的时间，而仅仅是实际执行这条命令的时间（也就是同时线程阻塞不能响应其他请求的阶段）。
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.
# 有两个关于慢日志的参数可配制：1 超过指定时间就纪录 2 慢日志队列的长度，当新的命令被记录，最老的日志会被移除。

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
# 下面的时间单位是微秒，所以1000000等于1秒。注意：设置为负数会禁用慢查询日志，设置为0会记录所有查询命令。
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
# 没有慢日志队列的长度限制。但是这样会消耗内存。可以使用SLOWLOG RESET来回收内存。
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
# redis能够通知Pub/Sub客户端关于键空间发生的事件。这个特性在http://redis.io/topics/notifications的文档中有描述。
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
# 举例来说，如果键空间事件通知是开启的，当客户端在0号数据库的键foo上执行了DEL命令，两条消息将会通过Pub/Sub发布：
# 
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
# 可以选择让redis通知一组类别内的事件。每个类别用一个字符表示：
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
# 键空间。
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
# 键事件。
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
# 通用的命令，比如DEL,EXPIRE, RENAME等（非某种数据结构特有的）
#  $     String commands
# 字符串类型命令
#  l     List commands
# 列表类型命令
#  s     Set commands
# 集合类型命令
#  h     Hash commands
# 哈希类型命令
#  z     Sorted set commands
# 有序集合类型命令
#  x     Expired events (events generated every time a key expires)
# 过期事件（当键过期时生成事件）
#  e     Evicted events (events generated when a key is evicted for maxmemory)
# 过期淘汰事件（当键在内存满时淘汰时生成）
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
# g$lshzxe的别名，所以AKE代表所有的事件。
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#  notify-keyspace-events的参数是由0个至多个字符组成的字符串。空字符串意味着关闭通知。
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#  例子：键事件的角度，打开列表和通用命令的事件，使用：
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#  例子：在__keyevent@0__:expired频道订阅过期键，使用：
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
#  默认的，所有的通知都是关闭的，因为大部分用户不需要使用到这个特性。注意，如果想要事件被传达，K（键空间）或E（键事件）至少指定一个。
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -> normal clients including MONITOR clients
# slave  -> slave clients
# pubsub -> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and slave clients, since
# subscribers and slaves receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes
